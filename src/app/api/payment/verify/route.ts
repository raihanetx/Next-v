import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { transactionId, orderId } = await request.json();
    
    console.log('üîç Verifying transaction:', { transactionId, orderId });
    
    if (!transactionId) {
      return NextResponse.json(
        { error: 'Transaction ID is required' },
        { status: 400 }
      );
    }
    
    // ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶Æ‡ßÅ‡¶ñ‡ßÄ‡¶® ‡¶π‡¶ö‡ßç‡¶õ‡¶ø,
    // ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø mock ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßã
    // ‡¶Ø‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶¨‡ßá ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶§‡ßá
    
    // Mock verification for demo purposes
    // In production, this would call the actual RupantorPay API
    const mockVerification = await mockTransactionVerification(transactionId, orderId);
    
    if (mockVerification.success) {
      return NextResponse.json({
        success: true,
        transaction: mockVerification.data,
        message: '‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá'
      });
    } else {
      return NextResponse.json(
        { 
          error: 'Transaction verification failed',
          details: mockVerification.error,
          suggestion: mockVerification.suggestion
        },
        { status: 400 }
      );
    }
    
  } catch (error) {
    console.error('‚ùå Verification error:', error);
    
    return NextResponse.json(
      { 
        error: 'Verification service error',
        message: '‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
        suggestion: '‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶ö‡¶≤‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡ßá, ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§'
      },
      { status: 500 }
    );
  }
}

// Mock transaction verification function
async function mockTransactionVerification(transactionId: string, orderId?: string) {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // Generate a mock response based on transaction ID pattern
  const isValidFormat = transactionId.length >= 8 && /^[A-Z0-9]+$/i.test(transactionId);
  
  if (!isValidFormat) {
    return {
      success: false,
      error: 'Invalid transaction ID format',
      suggestion: '‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶Ø‡¶º‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡¶∏‡¶ø‡¶¶ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§'
    };
  }
  
  // Mock successful verification
  return {
    success: true,
    data: {
      transaction_id: transactionId,
      order_id: orderId || `ORD${Date.now()}`,
      status: 'COMPLETED',
      amount: '1.00',
      currency: 'BDT',
      payment_method: 'SEND_MONEY',
      timestamp: new Date().toISOString(),
      verified_at: new Date().toISOString(),
      // ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
      domain_match: 'bypassed_for_localhost',
      note: 'This is a mock verification for localhost testing'
    }
  };
}